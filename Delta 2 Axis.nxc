/*
Changelog
release 003

20130920
  + (17:00) Automatic homing at startup, basic implementation of motion kinematics

20130919
  + (15:59) Homing procedures with touch sensor, start position regulation procedure, limits

20130917
  + (20:00) Added HMI definition

Task configuration:
- HMI
- INPUT
- CONTROL

Activity
myActivity = 1 - horizontal motion
           = 2 - vertical motion
           = 3 - A1 homing
           = 4 - A2 homing
           
HMI display
________________________
LINE1: Ctl:000000
LINE2: A1 :000000,000
LINE3: A2 :000000,000
LINE4: Activity
LINE5: Height:00000
LINE6: Length:00000
LINE7: X:0000
LINE8: Y:0000

*/

#define A_P 45
#define A_I 45
#define A_D 45



#define TRAVEL_AFTER_HOME 2000
#define APROACH_HOME_SPEED 50
#define SPEED_AFTER_HOME 50

#define ACTIVITY_HORIZONTAL 1
#define ACTIVITY_VERTICAL 2
#define ACTIVITY_A1_HOMING 3
#define ACTIVITY_A2_HOMING 4
#define ACTIVITY_MAX 5

#define CONTROL_AXIS 0
#define MOTOR_A1 1
#define MOTOR_A2 2

#define BOTTOM_LIMIT -1300
#define TOP_LIMIT 1500

#define DEFAULT_HEIGHT 1600
#define DEFAULT_LENGTH 2000

int myActivity;
int myTachoCounts[3];
int myLastTachoCounts[3];
int myActualMotorSpeed[3];
int myAxisSP[3];

long myLength,myHeight,myX,myY;
long myDbgLong;

bool myHomingActive[3],myHomingTracking[3];

bool myTouchInput,myLeftButton,myRightButton,myCenterButton;
bool myMotionActive,myStartup;

void StartRegulatedPositioner() {
  SetMotorRegulationTime(MS_5);
  SetMotorRegulationOptions(OUT_REGOPTION_NO_SATURATION);
  PosRegSetMax(OUT_BC, 100, 35);
  PosRegEnable(OUT_BC,A_P,A_I,A_D);
  ResetAllTachoCounts(OUT_A);
  myLastTachoCounts[CONTROL_AXIS]=0;
  myMotionActive=true;
  myX=0;
  myY=0;
}

void StopRegulatedPositioner() {
CoastEx(OUT_A, RESET_NONE);


}

long MakeA1()
{
  long sqrtL2h2;
  sqrtL2h2=sqrt(myLength*myLength-myHeight*myHeight);
  //myDbgLong=sqrtL2h2;
  long term2;
  term2=myHeight*myHeight+2*sqrtL2h2*myX-myX*myX;
  myDbgLong=term2;
  if (term2<0) term2*=(-1);
  return myY+(sqrt(term2))-myHeight;
}

long MakeA2()
{
  return myY;
}



string fnc_MakeActivityName(int vActivity)
{
  switch(vActivity)
      {case ACTIVITY_HORIZONTAL :return "Horizontal";break;
       case ACTIVITY_VERTICAL   :return "Vertical";break;
       case ACTIVITY_A1_HOMING  :return "A1 homing";break;
       case ACTIVITY_A2_HOMING  :return "A2 homing";break;
       default:return "Undefined";break;
      }
}

void fnc_Activity_Inbound(int vActivity)
{
  switch(vActivity)
      {case ACTIVITY_HORIZONTAL :StartRegulatedPositioner();break;
       case ACTIVITY_VERTICAL   :StartRegulatedPositioner();break;
       case ACTIVITY_A1_HOMING  :StopRegulatedPositioner();break;
       case ACTIVITY_A2_HOMING  :StopRegulatedPositioner();break;
       default:;break;
      }
}

task INPUT()  {
  int i,myTravelControl;
  string s;
  while(true) {
    myTachoCounts[CONTROL_AXIS]=MotorTachoCount(OUT_A);
    myTachoCounts[MOTOR_A1]=MotorTachoCount(OUT_B);
    myTachoCounts[MOTOR_A2]=MotorTachoCount(OUT_C);
    myActualMotorSpeed[CONTROL_AXIS]=MotorActualSpeed(OUT_A);
    myActualMotorSpeed[MOTOR_A1]=MotorActualSpeed(OUT_B);
    myActualMotorSpeed[MOTOR_A2]=MotorActualSpeed(OUT_C);
    myTouchInput=(Sensor(IN_1)==1);
    myRightButton=ButtonPressed(BTNRIGHT, false);
    myLeftButton=ButtonPressed(BTNLEFT, false);
    myCenterButton=ButtonPressed(BTNCENTER, false);
    if (myMotionActive)
    {
      myTravelControl=myTachoCounts[CONTROL_AXIS]-myLastTachoCounts[CONTROL_AXIS];
    }
    else
    {
      myTravelControl=0;
    }



      switch(myActivity)
      {case ACTIVITY_HORIZONTAL :myX+=myTravelControl;break;
       case ACTIVITY_VERTICAL   :myY+=myTravelControl;break;
       case ACTIVITY_A1_HOMING  :;break;
       case ACTIVITY_A2_HOMING  :;break;
       default:;break;
      }


    myLastTachoCounts[CONTROL_AXIS]=myTachoCounts[CONTROL_AXIS];
    myAxisSP[MOTOR_A1]=MakeA1();
    myAxisSP[MOTOR_A2]=MakeA2();
    }
}

task A1()  {
  int me=MOTOR_A1;
  int qSP;
  while(true) {
  if(myHomingActive[me]) {
    OnFwd(OUT_B, APROACH_HOME_SPEED);
    myHomingActive[me]=false;
    myHomingTracking[me]=true;
    }
  if (myHomingTracking[me] && myTouchInput)
    {
      ResetAllTachoCounts(OUT_B);
      RotateMotorPID(OUT_B, SPEED_AFTER_HOME, -TRAVEL_AFTER_HOME,A_P,A_I,A_D);
      myHomingTracking[me]=false;
      if(myStartup) {StartRegulatedPositioner();PlayFileEx("Good.rso", 3, false);Wait(MS_500);myStartup=false;}
    }
  if (myMotionActive)
    {
      if (myAxisSP[me]>TOP_LIMIT) qSP=TOP_LIMIT;
      if (myAxisSP[me]<BOTTOM_LIMIT) qSP=BOTTOM_LIMIT;
      if (myAxisSP[me]<TOP_LIMIT && myAxisSP[me]>BOTTOM_LIMIT) qSP=myAxisSP[me];
      PosRegSetAngle(OUT_B, qSP);
    }
    }
}

task A2()  {
  int me=MOTOR_A2;
  int qSP;
  while(true) {
  if(myHomingActive[me]) {
    OnFwd(OUT_C, APROACH_HOME_SPEED);
    myHomingActive[me]=false;
    myHomingTracking[me]=true;
    }
  if (myHomingTracking[me] && myTouchInput)
    {
      ResetAllTachoCounts(OUT_C);
      RotateMotorPID(OUT_C, SPEED_AFTER_HOME, -TRAVEL_AFTER_HOME,A_P,A_I,A_D);
      myHomingTracking[me]=false;
    }
  if (myMotionActive)
    {
      if (myAxisSP[me]>TOP_LIMIT) qSP=TOP_LIMIT;
      if (myAxisSP[me]<BOTTOM_LIMIT) qSP=BOTTOM_LIMIT;
      if (myAxisSP[me]<TOP_LIMIT && myAxisSP[me]>BOTTOM_LIMIT) qSP=myAxisSP[me];
      PosRegSetAngle(OUT_C, qSP);
    }
    }
}

task ACTIVITY() {
  bool myLastLeftButton,myLastRightButton,myLastCenterButton;
  while(true) {
  if (myLeftButton && !myLastLeftButton && !myStartup)
  {
    myLastLeftButton=true;
    myMotionActive=false;
    myActivity=myActivity-1;
    if (myActivity==0) myActivity=ACTIVITY_A2_HOMING;
    fnc_Activity_Inbound(myActivity);
  }
  if (!myLeftButton) myLastLeftButton=false;
  if (myRightButton && !myLastRightButton && !myStartup)
  {
    myLastRightButton=true;
    myMotionActive=false;
    myActivity=myActivity+1;
    if (myActivity==ACTIVITY_MAX) myActivity=ACTIVITY_HORIZONTAL;
    fnc_Activity_Inbound(myActivity);
  }
  if (!myRightButton) myLastRightButton=false;
  if (myCenterButton && !myLastCenterButton && !myStartup)
  {
    myLastCenterButton=true;
    myMotionActive=false;
    if (myActivity==ACTIVITY_A1_HOMING) myHomingActive[MOTOR_A1]=true;
    if (myActivity==ACTIVITY_A2_HOMING) myHomingActive[MOTOR_A2]=true;
  }
  if (!myCenterButton) myLastCenterButton=false;
  }
}

task HMI()
{ string s;
  while(true) {
    Wait(MS_500);
    ClearScreen();
    s="Ctl:";
    s=strcat(s,FormatNum("%05d", myTachoCounts[CONTROL_AXIS]));
    TextOut(0, LCD_LINE1,s);

    s="A1 :";
    s=strcat(s,FormatNum("%05d,", myTachoCounts[MOTOR_A1]));
    s=strcat(s,FormatNum("%03d", myActualMotorSpeed[MOTOR_A1]));
    TextOut(0, LCD_LINE2,s);

    s="A2 :";
    s=strcat(s,FormatNum("%05d,", myTachoCounts[MOTOR_A2]));
    s=strcat(s,FormatNum("%03d", myActualMotorSpeed[MOTOR_A2]));
    TextOut(0, LCD_LINE3,s);

    s=fnc_MakeActivityName(myActivity);
    s=strcat(s,FormatNum(",%05d",myDbgLong ));
    TextOut(0, LCD_LINE4,s);

    s="Height:";
    s=strcat(s,FormatNum("%05d", myHeight));
    TextOut(0, LCD_LINE5,s);
    
    s="Length:";
    s=strcat(s,FormatNum("%05d", myLength));
    TextOut(0, LCD_LINE6,s);
    
    s="X:";
    s=strcat(s,FormatNum("%05d,", myX));
    s=strcat(s,FormatNum("%05d", myAxisSP[MOTOR_A1]));
    TextOut(0, LCD_LINE7,s);

    s="Y:";
    s=strcat(s,FormatNum("%05d,", myY));
    s=strcat(s,FormatNum("%05d", myAxisSP[MOTOR_A2]));

    TextOut(0, LCD_LINE8,s);
              }
}



void init() {
  CoastEx(OUT_A, RESET_NONE);
  myActivity=ACTIVITY_HORIZONTAL;
  SetSensorTouch(IN_1);
  //StartRegulatedPositioner();
  myHeight=DEFAULT_HEIGHT;
  myLength=DEFAULT_LENGTH;
  myHomingActive[MOTOR_A1]=true;
  myStartup=true;
  
}
task main() {
  //Initialisation
  init();
  //Task configuration
  Precedes(INPUT,A1,A2,ACTIVITY,HMI);
}
