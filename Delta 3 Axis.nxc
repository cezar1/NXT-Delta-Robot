/*
Changelog
release 004

20131026
  + (19:38) Overhaul, release for 3 axis tower, basic functionality

20130920
  + (17:00) Automatic homing at startup, basic implementation of motion kinematics

20130919
  + (15:59) Homing procedures with touch sensor, start position regulation procedure, limits

20130917
  + (20:00) Added HMI definition

Task configuration:
- HMI
- INPUT
- CONTROL

Activity
myActivity = 1 - X motion
           = 2 - Y motion
           = 3 - Z motion
           = 4 - Homing
           
HMI display
________________________
LINE1: X :000000
LINE2: Y :000000
LINE3: Z :000000

LINE4: A1:000000
LINE5: A2:000000
LINE6: A3:000000

LINE7: Activity

*/

#define A_P 45
#define A_I 45
#define A_D 45



#define TRAVEL_AFTER_HOME 2000
#define APROACH_HOME_SPEED 50
#define SPEED_AFTER_HOME 50
#define INVERT_Y_DIR 0

#define ACTIVITY_X 1
#define ACTIVITY_Y 2
#define ACTIVITY_Z 3
#define ACTIVITY_HOMING 4
#define ACTIVITY_MAX 5

#define MOTOR_A1 0
#define MOTOR_A2 1
#define MOTOR_A3 2

#define BOTTOM_LIMIT -1000
#define TOP_LIMIT 1000

#define DEFAULT_HOMING_HEIGHT 1600
#define A1_HOMING_OFFSET 0
#define A2_HOMING_OFFSET 0
#define A3_HOMING_OFFSET 0

#define RESOLUTION_MOTION_SINGLE 10

int myActivity;
long myTachoCounts[3];
long myLastTachoCounts[3];
int myActualMotorSpeed[3];
long myAxisSP[3];

long myX,myY,myZ;
long myDbgLong;

bool myHomingActive[3],myHomingTracking[3];

bool myTouchInput[3],myReadyForOperation[3],myLeftButton,myRightButton,myCenterButton;
bool myMotionActive,myStartup,mySetpointChangeOverActive;

void StartRegulatedPositioner() {
  SetMotorRegulationTime(MS_5);
  SetMotorRegulationOptions(OUT_REGOPTION_NO_SATURATION);
  PosRegSetMax(OUT_ABC, 100, 35);
  PosRegEnable(OUT_ABC,A_P,A_I,A_D);
  ResetAllTachoCounts(OUT_ABC);
  myMotionActive=true;
}

void StopRegulatedPositioner() {
  CoastEx(OUT_ABC, RESET_NONE);
}

long MakeA1()
{
  return 0;
}

long MakeA2()
{
  return 0;
}

long MakeA3()
{
  return 0;
}

string fnc_MakeActivityName(int vActivity)
{
  switch(vActivity)
      {case ACTIVITY_X        :return "X Travel";break;
       case ACTIVITY_Y        :return "Y Travel";break;
       case ACTIVITY_Z        :return "Z travel";break;
       case ACTIVITY_HOMING   :return "Homing";break;
       default:return "Undefined";break;
      }
}

void fnc_Activity_Inbound(int vActivity)
{
  switch(vActivity)
      {case ACTIVITY_X        :;break;
       case ACTIVITY_Y        :;break;
       case ACTIVITY_Z        :;break;
       case ACTIVITY_HOMING   :;break;
       default:;break;
      }
}

task INPUT()  {
  int i,myTravelControl;
  bool myLastButton[3];
  string s;
  while(true) {
    myTachoCounts[MOTOR_A1]=MotorTachoCount(OUT_A);
    myTachoCounts[MOTOR_A2]=MotorTachoCount(OUT_B);
    myTachoCounts[MOTOR_A3]=MotorTachoCount(OUT_C);
    myActualMotorSpeed[MOTOR_A1]=MotorActualSpeed(OUT_A);
    myActualMotorSpeed[MOTOR_A2]=MotorActualSpeed(OUT_B);
    myActualMotorSpeed[MOTOR_A3]=MotorActualSpeed(OUT_C);
    myTouchInput[MOTOR_A1]=(Sensor(IN_1)==1);
    myTouchInput[MOTOR_A2]=(Sensor(IN_2)==1);
    myTouchInput[MOTOR_A3]=(Sensor(IN_3)==1);
    myRightButton=ButtonPressed(BTNRIGHT, false);
    myLeftButton=ButtonPressed(BTNLEFT, false);
    myCenterButton=ButtonPressed(BTNCENTER, false);

    if (mySetpointChangeOverActive )
    {
      if (myRightButton && !myLastButton[BTNRIGHT]) {myTravelControl=RESOLUTION_MOTION_SINGLE;}
      if (myLeftButton && !myLastButton[BTNLEFT]) {myTravelControl=-RESOLUTION_MOTION_SINGLE;}
    }
    else
    {
      myTravelControl=0;
    }



      switch(myActivity)
      {case ACTIVITY_X :myX+=myTravelControl;break;
       case ACTIVITY_Y :myY+=myTravelControl;break;
       case ACTIVITY_Z :myZ+=myTravelControl;break;
       default:;break;
      }


    myAxisSP[MOTOR_A1]=MakeA1();
    myAxisSP[MOTOR_A2]=MakeA2();
    myAxisSP[MOTOR_A3]=MakeA3();


    myLastButton[BTNRIGHT]  =myRightButton;
    myLastButton[BTNLEFT]   =myLeftButton;
    myLastButton[BTNCENTER] =myCenterButton;
    }

}

task A1()  {
  int me=MOTOR_A1;
  long qSP;
  while(true) {
  if(myHomingActive[me]) {
    if (INVERT_Y_DIR) {OnFwd(OUT_A, APROACH_HOME_SPEED);}
    else {OnFwd(OUT_A, -APROACH_HOME_SPEED);}
    myHomingActive[me]=false;
    myHomingTracking[me]=true;
    }
  if (myHomingTracking[me] && myTouchInput[me])
    {
      ResetAllTachoCounts(OUT_A);
      if (INVERT_Y_DIR) {RotateMotorPID(OUT_A, SPEED_AFTER_HOME, -TRAVEL_AFTER_HOME,A_P,A_I,A_D);}
      else {RotateMotorPID(OUT_A, SPEED_AFTER_HOME, TRAVEL_AFTER_HOME,A_P,A_I,A_D);}
      myHomingTracking[me]=false;
      myReadyForOperation[me]=true;
      //if(myStartup) {StartRegulatedPositioner();PlayFileEx("Good.rso", 3, false);Wait(MS_500);myStartup=false;}
    }
  if (myMotionActive)
    {
      if (myAxisSP[me]>TOP_LIMIT) qSP=TOP_LIMIT;
      if (myAxisSP[me]<BOTTOM_LIMIT) qSP=BOTTOM_LIMIT;
      if (myAxisSP[me]<TOP_LIMIT && myAxisSP[me]>BOTTOM_LIMIT) qSP=myAxisSP[me];
      PosRegSetAngle(OUT_A, qSP);
    }
    }
}



task ACTIVITY() {
  bool myLastLeftButton,myLastRightButton,myLastCenterButton;
  while(true) {
  if (myLeftButton && !myLastLeftButton && !myStartup)
  {
    myLastLeftButton=true;
    myMotionActive=false;
    myActivity=myActivity-1;
    if (myActivity==0) myActivity=ACTIVITY_HOMING;
    fnc_Activity_Inbound(myActivity);
  }
  if (!myLeftButton) myLastLeftButton=false;
  if (myRightButton && !myLastRightButton && !myStartup)
  {
    myLastRightButton=true;
    myMotionActive=false;
    myActivity=myActivity+1;
    if (myActivity==ACTIVITY_MAX) myActivity=ACTIVITY_X;
    fnc_Activity_Inbound(myActivity);
  }
  if (!myRightButton) myLastRightButton=false;
  if (myCenterButton && !myLastCenterButton && !myStartup)
  {
    myLastCenterButton=true;
    myMotionActive=false;
  }
  if (!myCenterButton) myLastCenterButton=false;
  }
}

task HMI()
{
  /*
HMI display
________________________
LINE1: X :000000
LINE2: Y :000000
LINE3: Z :000000

LINE4: A1:000000
LINE5: A2:000000
LINE6: A3:000000

LINE7: Activity
*/
  string s;

  while(true) {
    Wait(MS_500);
    ClearScreen();

    s="X :";s=strcat(s,FormatNum("%05d", myX                    ));TextOut(0, LCD_LINE1,s);
    s="Y :";s=strcat(s,FormatNum("%05d", myY                    ));TextOut(0, LCD_LINE2,s);
    s="Z :";s=strcat(s,FormatNum("%05d", myZ                    ));TextOut(0, LCD_LINE3,s);

    s="A1:";s=strcat(s,FormatNum("%05d", myTachoCounts[MOTOR_A1]));TextOut(0, LCD_LINE4,s);
    s="A2:";s=strcat(s,FormatNum("%05d", myTachoCounts[MOTOR_A2]));TextOut(0, LCD_LINE5,s);
    s="A3:";s=strcat(s,FormatNum("%05d", myTachoCounts[MOTOR_A3]));TextOut(0, LCD_LINE6,s);

    s=fnc_MakeActivityName(myActivity);s=strcat(s,FormatNum(",%05d",myDbgLong ));TextOut(0, LCD_LINE7,s);
    }
}



void init() {
  CoastEx(OUT_A, RESET_NONE);
  myActivity=ACTIVITY_HOMING;
  SetSensorTouch(IN_1);
  SetSensorTouch(IN_2);
  SetSensorTouch(IN_3);
  //StartRegulatedPositioner();
  myStartup=true;
  
}
task main() {
  //Initialisation
  init();
  //Task configuration
  Precedes(INPUT,A1,ACTIVITY,HMI);
}
