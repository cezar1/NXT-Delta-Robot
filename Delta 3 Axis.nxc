/*
Changelog
release 010

20131106
        +  (14:26)  Added TOWER_HEIGHT constant

20131105
        +  (14:00)  Implemented circle activity with motion logic

20131031
        +  (16:20)  Added circle activity

20131029
        +  (15:39)  Modified homing procedure
        +  (15:39)  Added simple routine noise motion, phased between three motors
        +  (15:39)  Added synchronised travel after homing

20131028
  + (15:24) Update

20131026
  + (19:38) Overhaul, release for 3 axis tower, basic functionality

20130920
  + (17:00) Automatic homing at startup, basic implementation of motion kinematics

20130919
  + (15:59) Homing procedures with touch sensor, start position regulation procedure, limits

20130917
  + (20:00) Added HMI definition

Task configuration:
- HMI
- INPUT
- CONTROL

Activity
myActivity = 1 - X motion
           = 2 - Y motion
           = 3 - Z motion
           = 4 - Homing
           = 5 - Circle
           
HMI display
________________________
LINE1: X :000000
LINE2: Y :000000
LINE3: Z :000000

LINE4: A1:000000
LINE5: A2:000000
LINE6: A3:000000

LINE7: Activity

*/
//#define SIMULATOR

#define TOWER_HEIGHT 1000

#define A_P 125
#define A_I 125
#define A_D 70

#define TRAVEL_AFTER_HOME 800
#define APROACH_HOME_SPEED 50
#define SPEED_AFTER_HOME 50
#define INVERT_Y_DIR 0

#define ACTIVITY_X 1
#define ACTIVITY_Y 2
#define ACTIVITY_Z 3
#define ACTIVITY_HOMING 4
#define ACTIVITY_CIRCLE 5
#define ACTIVITY_MAX 6

#define CIRCLE_ACTIVITY_L_PLUS          1
#define CIRCLE_ACTIVITY_L_MINUS         2
#define CIRCLE_ACTIVITY_R_PLUS          3
#define CIRCLE_ACTIVITY_R_MINUS         4
#define CIRCLE_ACTIVITY_Radius_PLUS     5
#define CIRCLE_ACTIVITY_Radius_MINUS    6
#define CIRCLE_ACTIVITY_Small_R_PLUS    7
#define CIRCLE_ACTIVITY_Small_R_MINUS   8
#define CIRCLE_ACTIVITY_Deg_Inc_PLUS    9
#define CIRCLE_ACTIVITY_Deg_Inc_MINUS   10
#define CIRCLE_ACTIVITY_H_PLUS          11
#define CIRCLE_ACTIVITY_H_MINUS         12
#define CIRCLE_ACTIVITY_Exit            13
#define CIRCLE_ACTIVITY_Max             14

#define CIRCLE_PARAM_INC                10

#define MOTOR_A1 0
#define MOTOR_A2 1
#define MOTOR_A3 2

#define BOTTOM_LIMIT -1000
#define TOP_LIMIT 1000

#define RESOLUTION_MOTION_SINGLE 10

#define NOISE_MODULO 500
#define NOISE_STEP   2

#define LEFT_BUTTON 0
#define RIGHT_BUTTON 1
#define CENTER_BUTTON 2

int CIRCLE_L,CIRCLE_R,CIRCLE_GR,CIRCLE_TR,CIRCLE_DEG_INC,myDegrees;

int myActivity,mySubActivity;
long myTachoCounts[3];
long myLastTachoCounts[3];
int myActualMotorSpeed[3];
long myAxisSP[3];

long myNoiseSignal;

long myX,myY,myZ;
long myDbgLong;

bool myHomingActive[3],myHomingTracking[3];

bool myTouchInput[3],myReadyForOperation[3],myLeftButton,myRightButton,myCenterButton;
bool myMotionActive,myStartup,myActivityOn;

void StartRegulatedPositioner() {
  SetMotorRegulationTime(50);
  SetMotorRegulationOptions(OUT_REGOPTION_NO_SATURATION);
  PosRegSetMax(OUT_ABC, 100, 80);
  PosRegEnable(OUT_ABC,A_P,A_I,A_D);
  ResetAllTachoCounts(OUT_ABC);
  myMotionActive=true;
}

void StopRegulatedPositioner() {
  CoastEx(OUT_ABC, RESET_NONE);
}

float MakeA1()
{
  float fCIRCLE_L=CIRCLE_L;
  float fmyX=myX;
  float fmyY=myY;
  float fCIRCLE_R=CIRCLE_R;
  float result=pow((((sqrt(3)*fCIRCLE_L)/3)-fmyX),2)+pow(fmyY,2);
  result=sqrt(pow(fCIRCLE_R,2)-result);
  return result+myZ;

}

float MakeA2()
{
  float fCIRCLE_L=CIRCLE_L;
  float fmyX=myX;
  float fmyY=myY;
  float fCIRCLE_R=CIRCLE_R;
  float result=pow((-((sqrt(3)*fCIRCLE_L)/6)+fmyX),2)+pow(fCIRCLE_L/2+fmyY,2);
  result=sqrt(pow(fCIRCLE_R,2)-result);
  return result+myZ;
}

float MakeA3()
{
  float fCIRCLE_L=CIRCLE_L;
  float fmyX=myX;
  float fmyY=myY;
  float fCIRCLE_R=CIRCLE_R;
  float result=pow((((sqrt(3)*fCIRCLE_L)/6)-fmyX),2)+pow(fCIRCLE_L/2-fmyY,2);
  result=sqrt(pow(fCIRCLE_R,2)-result);
  return result+myZ;
}
void InitCircleVar()
{
  CIRCLE_L=3000;
  CIRCLE_R=1500;
  CIRCLE_TR=100;
  CIRCLE_GR=100;
  CIRCLE_DEG_INC=3;
  myZ=0;
}
void MakeCircleScreen()
{
//Circle SubActivity
//L +0000|R +0000
//TR+0000|GR+0000
//Deg+000|H +0000
//X+000|Y+000|Z+000
//Q+000|Q+000|Q+000
//1+000|2+000|3+000
//E+000|E+000|E+000
string s;
s="L ";s=strcat(s,FormatNum("%03d", CIRCLE_L));s=strcat(s,FormatNum("|R %03d",CIRCLE_R));TextOut(0, LCD_LINE2,s);
s="TR";s=strcat(s,FormatNum("%03d", CIRCLE_TR));s=strcat(s,FormatNum("|GR%03d",CIRCLE_GR));TextOut(0, LCD_LINE3,s);
s="Deg";s=strcat(s,FormatNum("%03d", CIRCLE_DEG_INC));s=strcat(s,FormatNum("|H%03d",myZ));s=strcat(s,FormatNum("|D%03d",myDegrees));TextOut(0, LCD_LINE4,s);
s="X";s=strcat(s,FormatNum("%03d", myX));s=strcat(s,FormatNum("|Y%03d",myY));s=strcat(s,FormatNum("|Z%03d",myZ));TextOut(0, LCD_LINE5,s);
s="Q";s=strcat(s,FormatNum("%03d", myAxisSP[MOTOR_A1]));s=strcat(s,FormatNum("|Q%03d",myAxisSP[MOTOR_A2]));s=strcat(s,FormatNum("|Q%03d",myAxisSP[MOTOR_A3]));TextOut(0, LCD_LINE6,s);
s="1";s=strcat(s,FormatNum("%03d", myTachoCounts[MOTOR_A1]));s=strcat(s,FormatNum("|2%03d",myTachoCounts[MOTOR_A2]));s=strcat(s,FormatNum("|3%03d",myTachoCounts[MOTOR_A3]));TextOut(0, LCD_LINE7,s);
s="E";s=strcat(s,FormatNum("%03d", myAxisSP[MOTOR_A1]-myTachoCounts[MOTOR_A1]));s=strcat(s,FormatNum("|E%03d",myAxisSP[MOTOR_A2]-myTachoCounts[MOTOR_A2]));s=strcat(s,FormatNum("|E%03d",myAxisSP[MOTOR_A3]-myTachoCounts[MOTOR_A3]));TextOut(0, LCD_LINE8,s);
}
void MakeSubActivityScreen(int vActivity)
{
  switch(vActivity)
      {case ACTIVITY_CIRCLE   :MakeCircleScreen();break;
       default:;break;
      }
}
string fnc_MakeActivityName(int vActivity)
{
  switch(vActivity)
      {case ACTIVITY_X        :return "X Travel";break;
       case ACTIVITY_Y        :return "Y Travel";break;
       case ACTIVITY_Z        :return "Z travel";break;
       case ACTIVITY_HOMING   :return "Homing";break;
       case ACTIVITY_CIRCLE   :return "Circle";break;
       default:return "Undefined";break;
      }
}
string fnc_MakeCircleSubActivity(int vSubActivity)
{
  switch(vSubActivity)
      {case CIRCLE_ACTIVITY_L_PLUS        :return "L +";break;
       case CIRCLE_ACTIVITY_L_MINUS       :return "L -";break;
       case CIRCLE_ACTIVITY_R_PLUS        :return "R +";break;
       case CIRCLE_ACTIVITY_R_MINUS       :return "R -";break;
       case CIRCLE_ACTIVITY_Radius_PLUS   :return "Tgt R +";break;
       case CIRCLE_ACTIVITY_Radius_MINUS  :return "Tgt R -";break;
       case CIRCLE_ACTIVITY_Small_R_PLUS  :return "Grp R +";break;
       case CIRCLE_ACTIVITY_Small_R_MINUS :return "Grp R -";break;
       case CIRCLE_ACTIVITY_Deg_Inc_PLUS  :return "Deg +";break;
       case CIRCLE_ACTIVITY_Deg_Inc_MINUS :return "Deg -";break;
       case CIRCLE_ACTIVITY_H_PLUS        :return "H +";break;
       case CIRCLE_ACTIVITY_H_MINUS       :return "H -";break;


       case CIRCLE_ACTIVITY_Exit          :return "Exit";break;


       default:return "Undefined";break;
      }
}
string fnc_MakeSubActivityName(int vActivity, int vSubActivity)
{
  switch(vActivity)
      {case ACTIVITY_CIRCLE   :return fnc_MakeCircleSubActivity(vSubActivity);break;
       default:return "Undefined";break;
      }
}
void fnc_Activity_Inbound(int vActivity)
{
  switch(vActivity)
      {case ACTIVITY_X        :;break;
       case ACTIVITY_Y        :;break;
       case ACTIVITY_Z        :;break;
       case ACTIVITY_HOMING   :;break;
       default:;break;
      }
}

task INPUT()  {
  int i,myTravelControl;
  bool myLastButton[3],myButtonPressed[3];
  string s;
  while(true) {
    myNoiseSignal=(myNoiseSignal + NOISE_STEP) % NOISE_MODULO;
    myTachoCounts[MOTOR_A1]=MotorTachoCount(OUT_A);
    myTachoCounts[MOTOR_A2]=MotorTachoCount(OUT_B);
    myTachoCounts[MOTOR_A3]=MotorTachoCount(OUT_C);
    myActualMotorSpeed[MOTOR_A1]=MotorActualSpeed(OUT_A);
    myActualMotorSpeed[MOTOR_A2]=MotorActualSpeed(OUT_B);
    myActualMotorSpeed[MOTOR_A3]=MotorActualSpeed(OUT_C);
    myTouchInput[MOTOR_A1]=(Sensor(IN_1)==1);
    myDbgLong=myTouchInput[MOTOR_A1];
    myTouchInput[MOTOR_A2]=(Sensor(IN_2)==1);
    myTouchInput[MOTOR_A3]=(Sensor(IN_3)==1);
    myRightButton=ButtonPressed(BTNRIGHT, false);
    myLeftButton=ButtonPressed(BTNLEFT, false);
    myCenterButton=ButtonPressed(BTNCENTER, false);



      switch(myActivity)
      {case ACTIVITY_X :myX+=myTravelControl;break;
       case ACTIVITY_Y :myY+=myTravelControl;break;
       case ACTIVITY_Z :myZ+=myTravelControl;break;
       default:;break;
      }





    myLastButton[BTNRIGHT]  =myRightButton;
    myLastButton[BTNLEFT]   =myLeftButton;
    myLastButton[BTNCENTER] =myCenterButton;
    }

}

task A1()  {
  int me=MOTOR_A1;
  int myPort=OUT_A;
  long qSP;
  while(true) {
  if(!myReadyForOperation[me] && myStartup) {
    if (INVERT_Y_DIR) {OnFwd(myPort, APROACH_HOME_SPEED);}
    else {OnFwd(myPort, -APROACH_HOME_SPEED);}
    myHomingActive[me]=false;
    myHomingTracking[me]=true;
    }
  if (myHomingTracking[me] && myTouchInput[me])
    {
      ResetTachoCount(myPort);
      Off(myPort);Wait(MS_500);
      //if (INVERT_Y_DIR) {RotateMotorPID(myPort, SPEED_AFTER_HOME, -TRAVEL_AFTER_HOME,A_P,A_I,A_D);}
      //else {RotateMotorPID(myPort, SPEED_AFTER_HOME, TRAVEL_AFTER_HOME,A_P,A_I,A_D);}
      myHomingTracking[me]=false;
      myReadyForOperation[me]=true;
      //if(myStartup) {StartRegulatedPositioner();PlayFileEx("Good.rso", 3, false);Wait(MS_500);myStartup=false;}
    }
  if (myMotionActive)
    {
      if (myAxisSP[me]>TOP_LIMIT) qSP=TOP_LIMIT;
      if (myAxisSP[me]<BOTTOM_LIMIT) qSP=BOTTOM_LIMIT;
      if (myAxisSP[me]<TOP_LIMIT && myAxisSP[me]>BOTTOM_LIMIT) qSP=myAxisSP[me];
      PosRegSetAngle(myPort, qSP);
    }
    }
}

task A2()  {
  int me=MOTOR_A2;
  int myPort=OUT_B;
  long qSP;
  while(true) {
  if(!myReadyForOperation[me] && myStartup) {
    if (INVERT_Y_DIR) {OnFwd(myPort, APROACH_HOME_SPEED);}
    else {OnFwd(myPort, -APROACH_HOME_SPEED);}
    myHomingActive[me]=false;
    myHomingTracking[me]=true;
    }
  if (myHomingTracking[me] && myTouchInput[me])
    {
      ResetTachoCount(myPort);
      Off(myPort);Wait(MS_500);
      //if (INVERT_Y_DIR) {RotateMotorPID(myPort, SPEED_AFTER_HOME, -TRAVEL_AFTER_HOME,A_P,A_I,A_D);}
      //else {RotateMotorPID(myPort, SPEED_AFTER_HOME, TRAVEL_AFTER_HOME,A_P,A_I,A_D);}
      myHomingTracking[me]=false;
      myReadyForOperation[me]=true;
      //if(myStartup) {StartRegulatedPositioner();PlayFileEx("Good.rso", 3, false);Wait(MS_500);myStartup=false;}
    }
  if (myMotionActive)
    {
      if (myAxisSP[me]>TOP_LIMIT) qSP=TOP_LIMIT;
      if (myAxisSP[me]<BOTTOM_LIMIT) qSP=BOTTOM_LIMIT;
      if (myAxisSP[me]<TOP_LIMIT && myAxisSP[me]>BOTTOM_LIMIT) qSP=myAxisSP[me];
      PosRegSetAngle(myPort, qSP);
    }
    }
}

task A3()  {
  int me=MOTOR_A3;
  int myPort=OUT_C;
  long qSP;
  while(true) {
  if(!myReadyForOperation[me] && myStartup) {
    if (INVERT_Y_DIR) {OnFwd(myPort, APROACH_HOME_SPEED);}
    else {OnFwd(myPort, -APROACH_HOME_SPEED);}
    myHomingActive[me]=false;
    myHomingTracking[me]=true;
    }
  if (myHomingTracking[me] && myTouchInput[me])
    {
      ResetTachoCount(myPort);
      Off(myPort);Wait(MS_500);
      //if (INVERT_Y_DIR) {RotateMotorPID(myPort, SPEED_AFTER_HOME, -TRAVEL_AFTER_HOME,A_P,A_I,A_D);}
      //else {RotateMotorPID(myPort, SPEED_AFTER_HOME, TRAVEL_AFTER_HOME,A_P,A_I,A_D);}
      myHomingTracking[me]=false;
      myReadyForOperation[me]=true;
      //if(myStartup) {StartRegulatedPositioner();PlayFileEx("Good.rso", 3, false);Wait(MS_500);myStartup=false;}
    }
  if (myMotionActive)
    {
      if (myAxisSP[me]>TOP_LIMIT) qSP=TOP_LIMIT;
      if (myAxisSP[me]<BOTTOM_LIMIT) qSP=BOTTOM_LIMIT;
      if (myAxisSP[me]<TOP_LIMIT && myAxisSP[me]>BOTTOM_LIMIT) qSP=myAxisSP[me];
      PosRegSetAngle(myPort, qSP);
    }
    }
}
task SIGNAL()
{
  while (true)
  {
  if (myActivity==ACTIVITY_CIRCLE && myMotionActive && myActivityOn) myDegrees=(myDegrees+CIRCLE_DEG_INC) % 365;
  Wait(250);
  }
}
task MOTION()
{ int trunctarget;
  while (true)
    {
    if (myActivity==ACTIVITY_CIRCLE && myActivityOn)
      {
        float x = CIRCLE_TR * cosd(myDegrees);
        float y = CIRCLE_TR * sind(myDegrees);
        trunctarget=trunc(x);
        myX=trunctarget;
        trunctarget=trunc(y);
        myY=trunctarget;
        //myY=trunc(y);

      }
    if (myMotionActive)
      {
        myAxisSP[MOTOR_A1]=TOWER_HEIGHT-MakeA1();
        myAxisSP[MOTOR_A2]=TOWER_HEIGHT-MakeA2();
        myAxisSP[MOTOR_A3]=TOWER_HEIGHT-MakeA3();

      }
    }
}
void CircleLeftButton()
{
  if(myActivityOn)
    {
     mySubActivity-=1;if (mySubActivity==0) mySubActivity=CIRCLE_ACTIVITY_Max-1;
    }
}
void CircleRightButton()
{
  if(myActivityOn)
    {
     mySubActivity+=1;if (mySubActivity==CIRCLE_ACTIVITY_Max) mySubActivity=1;
    }
}
void CircleCenterButton()
{
  if(myActivityOn)
    {
    switch(mySubActivity)
      {
      case CIRCLE_ACTIVITY_L_PLUS        :CIRCLE_L+=CIRCLE_PARAM_INC;break;
      case CIRCLE_ACTIVITY_L_MINUS       :CIRCLE_L-=CIRCLE_PARAM_INC;break;
      case CIRCLE_ACTIVITY_R_PLUS        :CIRCLE_R+=CIRCLE_PARAM_INC;break;
      case CIRCLE_ACTIVITY_R_MINUS       :CIRCLE_R-=CIRCLE_PARAM_INC;break;
      case CIRCLE_ACTIVITY_Radius_PLUS   :CIRCLE_TR+=CIRCLE_PARAM_INC;break;
      case CIRCLE_ACTIVITY_Radius_MINUS  :CIRCLE_TR-=CIRCLE_PARAM_INC;break;
      case CIRCLE_ACTIVITY_Small_R_PLUS  :CIRCLE_GR+=CIRCLE_PARAM_INC;break;
      case CIRCLE_ACTIVITY_Small_R_MINUS :CIRCLE_GR-=CIRCLE_PARAM_INC;break;
      case CIRCLE_ACTIVITY_Deg_Inc_PLUS  :CIRCLE_DEG_INC+=CIRCLE_PARAM_INC;break;
      case CIRCLE_ACTIVITY_Deg_Inc_MINUS :CIRCLE_DEG_INC-=CIRCLE_PARAM_INC;break;
      case CIRCLE_ACTIVITY_H_PLUS        :myZ+=CIRCLE_PARAM_INC;break;
      case CIRCLE_ACTIVITY_H_MINUS       :myZ-=CIRCLE_PARAM_INC;break;
      case CIRCLE_ACTIVITY_Exit          :myActivityOn=false;break;

      default:;break;
      }
     }
  else
    {
    mySubActivity=CIRCLE_ACTIVITY_H_PLUS;
    myActivityOn=true;
    }
}
void LeftButton()
{
  if(myActivityOn)
    {
      switch(myActivity)
      {case ACTIVITY_X :break;
       case ACTIVITY_Y :break;
       case ACTIVITY_Z :break;
       case ACTIVITY_CIRCLE:CircleLeftButton();break;
       default:;break;
      }
    }
  else
    {
      myActivity-=1;if(myActivity==0) myActivity=ACTIVITY_MAX-1;
    }
}
void RightButton()
{
  if(myActivityOn)
    {
      switch(myActivity)
      {case ACTIVITY_X :break;
       case ACTIVITY_Y :break;
       case ACTIVITY_Z :break;
       case ACTIVITY_CIRCLE:CircleRightButton();break;
       default:;break;
      }
    }
  else
    {
      myActivity+=1;if(myActivity==ACTIVITY_MAX) myActivity=1;
    }
}
void CenterButton()
{
      switch(myActivity)
      {case ACTIVITY_X :break;
       case ACTIVITY_Y :break;
       case ACTIVITY_Z :break;
       case ACTIVITY_CIRCLE:CircleCenterButton();break;
       default:;break;
      }
}

task ACTIVITY() {
  bool myLastLeftButton,myLastRightButton,myLastCenterButton;
  while(true) {
#ifdef SIMULATOR
  if (myReadyForOperation[MOTOR_A1] && myReadyForOperation[MOTOR_A2] && myReadyForOperation[MOTOR_A3] && myStartup)
  {
    myStartup=false;
    PlayFileEx("Good.rso", 3, false);Wait(MS_500);
    myMotionActive=true;
  }
#else
  if (myReadyForOperation[MOTOR_A1] && myReadyForOperation[MOTOR_A2] && myReadyForOperation[MOTOR_A3] && myStartup)
  {
    myStartup=false;
    if (INVERT_Y_DIR) {RotateMotorPID(OUT_ABC, SPEED_AFTER_HOME, -TRAVEL_AFTER_HOME,A_P,A_I,A_D);}
    else {RotateMotorPID(OUT_ABC, SPEED_AFTER_HOME, TRAVEL_AFTER_HOME,A_P,A_I,A_D);}
    StartRegulatedPositioner();PlayFileEx("Good.rso", 3, false);Wait(MS_500);
    myActivityOn=true;
  }
#endif
  if (myLeftButton && !myLastLeftButton && !myStartup){LeftButton();}myLastLeftButton=myLeftButton;
  if (myRightButton && !myLastRightButton && !myStartup){RightButton();}myLastRightButton=myRightButton;
  if (myCenterButton && !myLastCenterButton && !myStartup){CenterButton();}myLastCenterButton=myCenterButton;
  }
}

task HMI()
{
  /*
HMI display
________________________
LINE1: X :000000
LINE2: Y :000000
LINE3: Z :000000

LINE4: A1:000000
LINE5: A2:000000
LINE6: A3:000000

LINE7: Activity
*/
  string s;

  while(true) {
    Wait(MS_500);
    ClearScreen();

    if (!myActivityOn)
    {
    s="X :";s=strcat(s,FormatNum("%05d", myX                    ));TextOut(0, LCD_LINE1,s);
    s="Y :";s=strcat(s,FormatNum("%05d", myY                    ));TextOut(0, LCD_LINE2,s);
    s="Z :";s=strcat(s,FormatNum("%05d", myZ                    ));TextOut(0, LCD_LINE3,s);

    s="A1:";s=strcat(s,FormatNum("%05d", myTachoCounts[MOTOR_A1]));TextOut(0, LCD_LINE4,s);
    s="A2:";s=strcat(s,FormatNum("%05d", myTachoCounts[MOTOR_A2]));TextOut(0, LCD_LINE5,s);
    s="A3:";s=strcat(s,FormatNum("%05d", myTachoCounts[MOTOR_A3]));TextOut(0, LCD_LINE6,s);

    s=fnc_MakeActivityName(myActivity);TextOut(0, LCD_LINE7,s);
    s="Debug1:";s=strcat(s,FormatNum("%05d",myDbgLong ));TextOut(0, LCD_LINE8,s);
    }
    else
    {
    s=fnc_MakeActivityName(myActivity);TextOut(0, LCD_LINE1,s);
    s=fnc_MakeSubActivityName(myActivity,mySubActivity);TextOut(50, LCD_LINE1,s);
    MakeSubActivityScreen(myActivity);
    }

    }
}



void init() {

  myActivity=ACTIVITY_CIRCLE;
  SetSensorTouch(IN_1);
  SetSensorTouch(IN_2);
  SetSensorTouch(IN_3);
  //StartRegulatedPositioner();
  myStartup=true;
  
  //CIRCLE
  mySubActivity=CIRCLE_ACTIVITY_L_PLUS;
  InitCircleVar();
}

void siminit(){
     myReadyForOperation[MOTOR_A1]=true;
     myReadyForOperation[MOTOR_A2]=true;
     myReadyForOperation[MOTOR_A3]=true;
}
task main() {
  //Initialisation
  init();
  //Task configuration
#ifdef SIMULATOR
  Precedes(SIGNAL,MOTION,INPUT,ACTIVITY,HMI);siminit();
#else
  Precedes(SIGNAL,MOTION,INPUT,A1,A2,A3,ACTIVITY,HMI);
#endif
}
